version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0.3
commands:
  destroy-environment:
    steps:
      - run:
          name: Destroy Envinronment
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name kelly-${CIRCLE_WORKFLOW_ID:0:6}

jobs:
  create-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file template.yml \
            --stack-name kelly-${CIRCLE_WORKFLOW_ID:0:6}
      - run: return 1 #fail purposely
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: install ansible 
          command: |
            apk add --update ansible
      - run:
          name: configure instance
          command: |
            ansible-playbook -i inventory.txt main.yml

  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            apk add --update curl
      - run: 
          name: smoke test
          command: |
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
  
  # executes the bucket.yml template to:
    # Create a new S3 bucket and
    # Copy the contents of the current repo (production files) to the new bucket. 
  create-and-deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - run: 
          name: execute bucket.yml- create cloudformation stack
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
      - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

  # performs the query and saves the id to a file that we can persist to the workspace.
  get-last-deployment-id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install dependencies
          command: yum install -y tar gzip
      - run:
          name: fetch and save old pipelineID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt 

  # executes our cloudfront.yml CloudFormation template used in the manual steps.
  promote-to-production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
  
  # Uses the pipeline ID to destroy the previous production version's S3 bucket 
  # and CloudFormation stack        
  clean-up-old-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install dependencies
          command: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack. 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive 


workflows:
  run-workflow:
    jobs:
      # - create-infrastructure
      # - configure-infrastructure
      # - smoke-test
      - create-and-deploy-frontend
      - promote-to-production:
          requires: 
            - create-and-deploy-frontend
      - get-last-deployment-id
      - clean-up-old-frontend:
          requires:
            - get-last-deployment-id
            - promote-to-production